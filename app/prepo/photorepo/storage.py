from django.conf import settings
from django.core.files.storage import Storage
from google.cloud import storage as gStorage
import config
import six
import datetime
from werkzeug import secure_filename
from PIL import Image
import requests
from io import BytesIO

class PhotoStorage(Storage):
    #def __init__(self):
        #TODO: determine if need an "option" for photoID???
    
    def _open(self, _id):
        response = requests.get(self.url)
        img = Image.open(BytesIO(response.content))
        return img

    def _save(self, name, data):
        self.url = upload_file(data.read(), name, data.content_type)     #TODO: may not work

    def exists(self, name):
        return self.url != None

    def url(self, name):
        print(self.url)
        if self.url == None:
            return settings.MEDIA_ROOT + name
        return self.url

def _safe_filename(filename):
    """
    Generates a safe filename that is unlikely to collide with existing objects
    in Google Cloud Storage.
    ``filename.ext`` is transformed into ``filename-YYYY-MM-DD-HHMMSS.ext``
    (Code generated by Google)
    """
    filename = secure_filename(filename)
    date = datetime.datetime.utcnow().strftime("%Y-%m-%d-%H%M%S")
    basename, extension = filename.rsplit('.', 1)
    return "{0}-{1}.{2}".format(basename, date, extension)

def upload_file(file_stream, filename, content_type):
    """
    Uploads a file to a given Cloud Storage bucket and returns the public url
    to the new object.
    """

    filename = _safe_filename(filename) 

    client = gStorage.Client(project=config.PROJECT_ID)
    bucket = client.bucket(config.CLOUD_STORAGE_BUCKET)
    blob = bucket.blob(filename)

    blob.upload_from_string(
        file_stream,
        content_type=content_type)

    url = blob.public_url

    if isinstance(url, six.binary_type):
        url = url.decode('utf-8')

    return url