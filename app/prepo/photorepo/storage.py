from django.conf import settings
from django.core.files.storage import Storage
from django.core.files import File
from google.cloud import storage as gStorage
import config
import six
import datetime
from werkzeug import secure_filename
from PIL import Image
import requests
from io import BytesIO
from django.utils.deconstruct import deconstructible
import sys
import urllib.request


@deconstructible
class PhotoStorage(Storage):
    def __init__(self, url=None):
        #TODO: determine if need an "option" for photoID???
        if url is None:
            self.url = None
        self.url = url
    
    def _open(self, _id):
        result = urllib.request.urlretrieve(self.url)
        return File(open(result[0], 'rb'))

    # return the URL as the name of the file because couldn't figure out how to permanently update URL field
    def _save(self, name, data):
        self.name = name
        self.url = upload_file(data.read(), name, data.content_type)
        return self.url

    def exists(self, name):
        return self.url != None

    def delete(self, name='', save=True):
        storage_client = gStorage.Client()
        bucket = storage_client.get_bucket(config.CLOUD_STORAGE_BUCKET)
        blob = bucket.blob(storage_filename(name))

        try:
            blob.delete()
        except Exception:
            # don't need to do anythoing since we'll just be cleaning up the db for now
            pass

    # def url(self, name):
    #     # breakpoint()
    #     # print(self.url)
    #     if self.url is None:
    #         return settings.MEDIA_ROOT + '/' + name
    #     return self.url

def storage_filename(dbname):
    return dbname[dbname.rfind('/')+1:]

def _safe_filename(filename):
    """
    Generates a safe filename that is unlikely to collide with existing objects
    in Google Cloud Storage.
    ``filename.ext`` is transformed into ``filename-YYYY-MM-DD-HHMMSS.ext``
    (Code generated by Google)
    """
    filename = secure_filename(filename)
    date = datetime.datetime.utcnow().strftime("%Y-%m-%d-%H%M%S")
    basename, extension = filename.rsplit('.', 1)
    return "{0}-{1}.{2}".format(basename, date, extension)

def upload_file(file_stream, filename, content_type):
    """
    Uploads a file to a given Cloud Storage bucket and returns the public url
    to the new object.
    """

    filename = _safe_filename(filename) 

    client = gStorage.Client(project=config.PROJECT_ID)
    bucket = client.bucket(config.CLOUD_STORAGE_BUCKET)
    blob = bucket.blob(filename)

    blob.upload_from_string(
        file_stream,
        content_type=content_type)

    url = blob.public_url

    if isinstance(url, six.binary_type):
        url = url.decode('utf-8')

    return url